// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenRevoker is an autogenerated mock type for the TokenRevoker type
type TokenRevoker struct {
	mock.Mock
}

type TokenRevoker_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenRevoker) EXPECT() *TokenRevoker_Expecter {
	return &TokenRevoker_Expecter{mock: &_m.Mock}
}

// IsTokenRevoked provides a mock function with given fields: ctx, token
func (_m *TokenRevoker) IsTokenRevoked(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenRevoker_IsTokenRevoked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenRevoked'
type TokenRevoker_IsTokenRevoked_Call struct {
	*mock.Call
}

// IsTokenRevoked is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *TokenRevoker_Expecter) IsTokenRevoked(ctx interface{}, token interface{}) *TokenRevoker_IsTokenRevoked_Call {
	return &TokenRevoker_IsTokenRevoked_Call{Call: _e.mock.On("IsTokenRevoked", ctx, token)}
}

func (_c *TokenRevoker_IsTokenRevoked_Call) Run(run func(ctx context.Context, token string)) *TokenRevoker_IsTokenRevoked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenRevoker_IsTokenRevoked_Call) Return(_a0 bool, _a1 error) *TokenRevoker_IsTokenRevoked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenRevoker_IsTokenRevoked_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *TokenRevoker_IsTokenRevoked_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenRevoker creates a new instance of TokenRevoker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRevoker(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRevoker {
	mock := &TokenRevoker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
