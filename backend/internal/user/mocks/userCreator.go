// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	user "github.com/nishojib/ffxivdailies/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// UserCreator is an autogenerated mock type for the UserCreator type
type UserCreator struct {
	mock.Mock
}

type UserCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *UserCreator) EXPECT() *UserCreator_Expecter {
	return &UserCreator_Expecter{mock: &_m.Mock}
}

// GetUserByProviderID provides a mock function with given fields: ctx, providerAccountID
func (_m *UserCreator) GetUserByProviderID(ctx context.Context, providerAccountID string) (user.User, error) {
	ret := _m.Called(ctx, providerAccountID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByProviderID")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return rf(ctx, providerAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = rf(ctx, providerAccountID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreator_GetUserByProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByProviderID'
type UserCreator_GetUserByProviderID_Call struct {
	*mock.Call
}

// GetUserByProviderID is a helper method to define mock.On call
//   - ctx context.Context
//   - providerAccountID string
func (_e *UserCreator_Expecter) GetUserByProviderID(ctx interface{}, providerAccountID interface{}) *UserCreator_GetUserByProviderID_Call {
	return &UserCreator_GetUserByProviderID_Call{Call: _e.mock.On("GetUserByProviderID", ctx, providerAccountID)}
}

func (_c *UserCreator_GetUserByProviderID_Call) Run(run func(ctx context.Context, providerAccountID string)) *UserCreator_GetUserByProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserCreator_GetUserByProviderID_Call) Return(_a0 user.User, _a1 error) *UserCreator_GetUserByProviderID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserCreator_GetUserByProviderID_Call) RunAndReturn(run func(context.Context, string) (user.User, error)) *UserCreator_GetUserByProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertAndLinkAccount provides a mock function with given fields: ctx, _a1, account
func (_m *UserCreator) InsertAndLinkAccount(ctx context.Context, _a1 *user.User, account *user.Account) error {
	ret := _m.Called(ctx, _a1, account)

	if len(ret) == 0 {
		panic("no return value specified for InsertAndLinkAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User, *user.Account) error); ok {
		r0 = rf(ctx, _a1, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserCreator_InsertAndLinkAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAndLinkAccount'
type UserCreator_InsertAndLinkAccount_Call struct {
	*mock.Call
}

// InsertAndLinkAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *user.User
//   - account *user.Account
func (_e *UserCreator_Expecter) InsertAndLinkAccount(ctx interface{}, _a1 interface{}, account interface{}) *UserCreator_InsertAndLinkAccount_Call {
	return &UserCreator_InsertAndLinkAccount_Call{Call: _e.mock.On("InsertAndLinkAccount", ctx, _a1, account)}
}

func (_c *UserCreator_InsertAndLinkAccount_Call) Run(run func(ctx context.Context, _a1 *user.User, account *user.Account)) *UserCreator_InsertAndLinkAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User), args[2].(*user.Account))
	})
	return _c
}

func (_c *UserCreator_InsertAndLinkAccount_Call) Return(_a0 error) *UserCreator_InsertAndLinkAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserCreator_InsertAndLinkAccount_Call) RunAndReturn(run func(context.Context, *user.User, *user.Account) error) *UserCreator_InsertAndLinkAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserCreator creates a new instance of UserCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCreator {
	mock := &UserCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
