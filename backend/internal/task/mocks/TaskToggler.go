// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	task "github.com/nishojib/ffxivdailies/internal/task"
	mock "github.com/stretchr/testify/mock"
)

// TaskToggler is an autogenerated mock type for the TaskToggler type
type TaskToggler struct {
	mock.Mock
}

type TaskToggler_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskToggler) EXPECT() *TaskToggler_Expecter {
	return &TaskToggler_Expecter{mock: &_m.Mock}
}

// AddUserTask provides a mock function with given fields: ctx, t
func (_m *TaskToggler) AddUserTask(ctx context.Context, t *task.Task) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for AddUserTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskToggler_AddUserTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserTask'
type TaskToggler_AddUserTask_Call struct {
	*mock.Call
}

// AddUserTask is a helper method to define mock.On call
//   - ctx context.Context
//   - t *task.Task
func (_e *TaskToggler_Expecter) AddUserTask(ctx interface{}, t interface{}) *TaskToggler_AddUserTask_Call {
	return &TaskToggler_AddUserTask_Call{Call: _e.mock.On("AddUserTask", ctx, t)}
}

func (_c *TaskToggler_AddUserTask_Call) Run(run func(ctx context.Context, t *task.Task)) *TaskToggler_AddUserTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.Task))
	})
	return _c
}

func (_c *TaskToggler_AddUserTask_Call) Return(_a0 error) *TaskToggler_AddUserTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskToggler_AddUserTask_Call) RunAndReturn(run func(context.Context, *task.Task) error) *TaskToggler_AddUserTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTask provides a mock function with given fields: ctx, userID, taskID
func (_m *TaskToggler) GetUserTask(ctx context.Context, userID string, taskID string) (task.Task, error) {
	ret := _m.Called(ctx, userID, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTask")
	}

	var r0 task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (task.Task, error)); ok {
		return rf(ctx, userID, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) task.Task); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Get(0).(task.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskToggler_GetUserTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTask'
type TaskToggler_GetUserTask_Call struct {
	*mock.Call
}

// GetUserTask is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - taskID string
func (_e *TaskToggler_Expecter) GetUserTask(ctx interface{}, userID interface{}, taskID interface{}) *TaskToggler_GetUserTask_Call {
	return &TaskToggler_GetUserTask_Call{Call: _e.mock.On("GetUserTask", ctx, userID, taskID)}
}

func (_c *TaskToggler_GetUserTask_Call) Run(run func(ctx context.Context, userID string, taskID string)) *TaskToggler_GetUserTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TaskToggler_GetUserTask_Call) Return(_a0 task.Task, _a1 error) *TaskToggler_GetUserTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskToggler_GetUserTask_Call) RunAndReturn(run func(context.Context, string, string) (task.Task, error)) *TaskToggler_GetUserTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTask provides a mock function with given fields: ctx, t
func (_m *TaskToggler) UpdateUserTask(ctx context.Context, t *task.Task) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskToggler_UpdateUserTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTask'
type TaskToggler_UpdateUserTask_Call struct {
	*mock.Call
}

// UpdateUserTask is a helper method to define mock.On call
//   - ctx context.Context
//   - t *task.Task
func (_e *TaskToggler_Expecter) UpdateUserTask(ctx interface{}, t interface{}) *TaskToggler_UpdateUserTask_Call {
	return &TaskToggler_UpdateUserTask_Call{Call: _e.mock.On("UpdateUserTask", ctx, t)}
}

func (_c *TaskToggler_UpdateUserTask_Call) Run(run func(ctx context.Context, t *task.Task)) *TaskToggler_UpdateUserTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.Task))
	})
	return _c
}

func (_c *TaskToggler_UpdateUserTask_Call) Return(_a0 error) *TaskToggler_UpdateUserTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskToggler_UpdateUserTask_Call) RunAndReturn(run func(context.Context, *task.Task) error) *TaskToggler_UpdateUserTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskToggler creates a new instance of TaskToggler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskToggler(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskToggler {
	mock := &TaskToggler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
