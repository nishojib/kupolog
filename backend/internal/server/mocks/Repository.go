// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	task "github.com/nishojib/ffxivdailies/internal/task"

	user "github.com/nishojib/ffxivdailies/internal/user"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddUserTask provides a mock function with given fields: ctx, t
func (_m *Repository) AddUserTask(ctx context.Context, t *task.Task) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for AddUserTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddUserTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserTask'
type Repository_AddUserTask_Call struct {
	*mock.Call
}

// AddUserTask is a helper method to define mock.On call
//   - ctx context.Context
//   - t *task.Task
func (_e *Repository_Expecter) AddUserTask(ctx interface{}, t interface{}) *Repository_AddUserTask_Call {
	return &Repository_AddUserTask_Call{Call: _e.mock.On("AddUserTask", ctx, t)}
}

func (_c *Repository_AddUserTask_Call) Run(run func(ctx context.Context, t *task.Task)) *Repository_AddUserTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.Task))
	})
	return _c
}

func (_c *Repository_AddUserTask_Call) Return(_a0 error) *Repository_AddUserTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_AddUserTask_Call) RunAndReturn(run func(context.Context, *task.Task) error) *Repository_AddUserTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasksForUser provides a mock function with given fields: ctx, userID
func (_m *Repository) GetTasksForUser(ctx context.Context, userID string) ([]task.Task, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksForUser")
	}

	var r0 []task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]task.Task, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []task.Task); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]task.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetTasksForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasksForUser'
type Repository_GetTasksForUser_Call struct {
	*mock.Call
}

// GetTasksForUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Repository_Expecter) GetTasksForUser(ctx interface{}, userID interface{}) *Repository_GetTasksForUser_Call {
	return &Repository_GetTasksForUser_Call{Call: _e.mock.On("GetTasksForUser", ctx, userID)}
}

func (_c *Repository_GetTasksForUser_Call) Run(run func(ctx context.Context, userID string)) *Repository_GetTasksForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetTasksForUser_Call) Return(_a0 []task.Task, _a1 error) *Repository_GetTasksForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetTasksForUser_Call) RunAndReturn(run func(context.Context, string) ([]task.Task, error)) *Repository_GetTasksForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByProviderID provides a mock function with given fields: ctx, providerAccountID
func (_m *Repository) GetUserByProviderID(ctx context.Context, providerAccountID string) (user.User, error) {
	ret := _m.Called(ctx, providerAccountID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByProviderID")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return rf(ctx, providerAccountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = rf(ctx, providerAccountID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerAccountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetUserByProviderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByProviderID'
type Repository_GetUserByProviderID_Call struct {
	*mock.Call
}

// GetUserByProviderID is a helper method to define mock.On call
//   - ctx context.Context
//   - providerAccountID string
func (_e *Repository_Expecter) GetUserByProviderID(ctx interface{}, providerAccountID interface{}) *Repository_GetUserByProviderID_Call {
	return &Repository_GetUserByProviderID_Call{Call: _e.mock.On("GetUserByProviderID", ctx, providerAccountID)}
}

func (_c *Repository_GetUserByProviderID_Call) Run(run func(ctx context.Context, providerAccountID string)) *Repository_GetUserByProviderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetUserByProviderID_Call) Return(_a0 user.User, _a1 error) *Repository_GetUserByProviderID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetUserByProviderID_Call) RunAndReturn(run func(context.Context, string) (user.User, error)) *Repository_GetUserByProviderID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetUserByUserID(ctx context.Context, userID string) (user.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUserID")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetUserByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUserID'
type Repository_GetUserByUserID_Call struct {
	*mock.Call
}

// GetUserByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *Repository_Expecter) GetUserByUserID(ctx interface{}, userID interface{}) *Repository_GetUserByUserID_Call {
	return &Repository_GetUserByUserID_Call{Call: _e.mock.On("GetUserByUserID", ctx, userID)}
}

func (_c *Repository_GetUserByUserID_Call) Run(run func(ctx context.Context, userID string)) *Repository_GetUserByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetUserByUserID_Call) Return(_a0 user.User, _a1 error) *Repository_GetUserByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetUserByUserID_Call) RunAndReturn(run func(context.Context, string) (user.User, error)) *Repository_GetUserByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTask provides a mock function with given fields: ctx, userID, taskID
func (_m *Repository) GetUserTask(ctx context.Context, userID string, taskID string) (task.Task, error) {
	ret := _m.Called(ctx, userID, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTask")
	}

	var r0 task.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (task.Task, error)); ok {
		return rf(ctx, userID, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) task.Task); ok {
		r0 = rf(ctx, userID, taskID)
	} else {
		r0 = ret.Get(0).(task.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetUserTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTask'
type Repository_GetUserTask_Call struct {
	*mock.Call
}

// GetUserTask is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - taskID string
func (_e *Repository_Expecter) GetUserTask(ctx interface{}, userID interface{}, taskID interface{}) *Repository_GetUserTask_Call {
	return &Repository_GetUserTask_Call{Call: _e.mock.On("GetUserTask", ctx, userID, taskID)}
}

func (_c *Repository_GetUserTask_Call) Run(run func(ctx context.Context, userID string, taskID string)) *Repository_GetUserTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Repository_GetUserTask_Call) Return(_a0 task.Task, _a1 error) *Repository_GetUserTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetUserTask_Call) RunAndReturn(run func(context.Context, string, string) (task.Task, error)) *Repository_GetUserTask_Call {
	_c.Call.Return(run)
	return _c
}

// InsertAndLinkAccount provides a mock function with given fields: ctx, u, account
func (_m *Repository) InsertAndLinkAccount(ctx context.Context, u *user.User, account *user.Account) error {
	ret := _m.Called(ctx, u, account)

	if len(ret) == 0 {
		panic("no return value specified for InsertAndLinkAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User, *user.Account) error); ok {
		r0 = rf(ctx, u, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_InsertAndLinkAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertAndLinkAccount'
type Repository_InsertAndLinkAccount_Call struct {
	*mock.Call
}

// InsertAndLinkAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - u *user.User
//   - account *user.Account
func (_e *Repository_Expecter) InsertAndLinkAccount(ctx interface{}, u interface{}, account interface{}) *Repository_InsertAndLinkAccount_Call {
	return &Repository_InsertAndLinkAccount_Call{Call: _e.mock.On("InsertAndLinkAccount", ctx, u, account)}
}

func (_c *Repository_InsertAndLinkAccount_Call) Run(run func(ctx context.Context, u *user.User, account *user.Account)) *Repository_InsertAndLinkAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*user.User), args[2].(*user.Account))
	})
	return _c
}

func (_c *Repository_InsertAndLinkAccount_Call) Return(_a0 error) *Repository_InsertAndLinkAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_InsertAndLinkAccount_Call) RunAndReturn(run func(context.Context, *user.User, *user.Account) error) *Repository_InsertAndLinkAccount_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenRevoked provides a mock function with given fields: ctx, token
func (_m *Repository) IsTokenRevoked(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_IsTokenRevoked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenRevoked'
type Repository_IsTokenRevoked_Call struct {
	*mock.Call
}

// IsTokenRevoked is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Repository_Expecter) IsTokenRevoked(ctx interface{}, token interface{}) *Repository_IsTokenRevoked_Call {
	return &Repository_IsTokenRevoked_Call{Call: _e.mock.On("IsTokenRevoked", ctx, token)}
}

func (_c *Repository_IsTokenRevoked_Call) Run(run func(ctx context.Context, token string)) *Repository_IsTokenRevoked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_IsTokenRevoked_Call) Return(_a0 bool, _a1 error) *Repository_IsTokenRevoked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_IsTokenRevoked_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Repository_IsTokenRevoked_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: ctx, token
func (_m *Repository) RevokeToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type Repository_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Repository_Expecter) RevokeToken(ctx interface{}, token interface{}) *Repository_RevokeToken_Call {
	return &Repository_RevokeToken_Call{Call: _e.mock.On("RevokeToken", ctx, token)}
}

func (_c *Repository_RevokeToken_Call) Run(run func(ctx context.Context, token string)) *Repository_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RevokeToken_Call) Return(_a0 error) *Repository_RevokeToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RevokeToken_Call) RunAndReturn(run func(context.Context, string) error) *Repository_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserTask provides a mock function with given fields: ctx, t
func (_m *Repository) UpdateUserTask(ctx context.Context, t *task.Task) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *task.Task) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateUserTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserTask'
type Repository_UpdateUserTask_Call struct {
	*mock.Call
}

// UpdateUserTask is a helper method to define mock.On call
//   - ctx context.Context
//   - t *task.Task
func (_e *Repository_Expecter) UpdateUserTask(ctx interface{}, t interface{}) *Repository_UpdateUserTask_Call {
	return &Repository_UpdateUserTask_Call{Call: _e.mock.On("UpdateUserTask", ctx, t)}
}

func (_c *Repository_UpdateUserTask_Call) Run(run func(ctx context.Context, t *task.Task)) *Repository_UpdateUserTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*task.Task))
	})
	return _c
}

func (_c *Repository_UpdateUserTask_Call) Return(_a0 error) *Repository_UpdateUserTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateUserTask_Call) RunAndReturn(run func(context.Context, *task.Task) error) *Repository_UpdateUserTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
