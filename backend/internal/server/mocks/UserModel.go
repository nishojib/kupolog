// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	user "github.com/nishojib/ffxivdailies/internal/user"
)

// UserModel is an autogenerated mock type for the UserModel type
type UserModel struct {
	mock.Mock
}

type UserModel_Expecter struct {
	mock *mock.Mock
}

func (_m *UserModel) EXPECT() *UserModel_Expecter {
	return &UserModel_Expecter{mock: &_m.Mock}
}

// GetOrCreate provides a mock function with given fields: ctx, email, provider, accountID
func (_m *UserModel) GetOrCreate(ctx context.Context, email user.Email, provider user.Provider, accountID user.ID) (user.User, error) {
	ret := _m.Called(ctx, email, provider, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreate")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.Email, user.Provider, user.ID) (user.User, error)); ok {
		return rf(ctx, email, provider, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.Email, user.Provider, user.ID) user.User); ok {
		r0 = rf(ctx, email, provider, accountID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.Email, user.Provider, user.ID) error); ok {
		r1 = rf(ctx, email, provider, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserModel_GetOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreate'
type UserModel_GetOrCreate_Call struct {
	*mock.Call
}

// GetOrCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - email user.Email
//   - provider user.Provider
//   - accountID user.ID
func (_e *UserModel_Expecter) GetOrCreate(ctx interface{}, email interface{}, provider interface{}, accountID interface{}) *UserModel_GetOrCreate_Call {
	return &UserModel_GetOrCreate_Call{Call: _e.mock.On("GetOrCreate", ctx, email, provider, accountID)}
}

func (_c *UserModel_GetOrCreate_Call) Run(run func(ctx context.Context, email user.Email, provider user.Provider, accountID user.ID)) *UserModel_GetOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.Email), args[2].(user.Provider), args[3].(user.ID))
	})
	return _c
}

func (_c *UserModel_GetOrCreate_Call) Return(_a0 user.User, _a1 error) *UserModel_GetOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserModel_GetOrCreate_Call) RunAndReturn(run func(context.Context, user.Email, user.Provider, user.ID) (user.User, error)) *UserModel_GetOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserModel creates a new instance of UserModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserModel {
	mock := &UserModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
