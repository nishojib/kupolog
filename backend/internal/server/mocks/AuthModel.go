// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AuthModel is an autogenerated mock type for the AuthModel type
type AuthModel struct {
	mock.Mock
}

type AuthModel_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthModel) EXPECT() *AuthModel_Expecter {
	return &AuthModel_Expecter{mock: &_m.Mock}
}

// CreateTokens provides a mock function with given fields: ctx, userID, authSecret
func (_m *AuthModel) CreateTokens(ctx context.Context, userID string, authSecret string) (string, string, error) {
	ret := _m.Called(ctx, userID, authSecret)

	if len(ret) == 0 {
		panic("no return value specified for CreateTokens")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, string, error)); ok {
		return rf(ctx, userID, authSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, userID, authSecret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, userID, authSecret)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, userID, authSecret)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AuthModel_CreateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTokens'
type AuthModel_CreateTokens_Call struct {
	*mock.Call
}

// CreateTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - authSecret string
func (_e *AuthModel_Expecter) CreateTokens(ctx interface{}, userID interface{}, authSecret interface{}) *AuthModel_CreateTokens_Call {
	return &AuthModel_CreateTokens_Call{Call: _e.mock.On("CreateTokens", ctx, userID, authSecret)}
}

func (_c *AuthModel_CreateTokens_Call) Run(run func(ctx context.Context, userID string, authSecret string)) *AuthModel_CreateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthModel_CreateTokens_Call) Return(_a0 string, _a1 string, _a2 error) *AuthModel_CreateTokens_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AuthModel_CreateTokens_Call) RunAndReturn(run func(context.Context, string, string) (string, string, error)) *AuthModel_CreateTokens_Call {
	_c.Call.Return(run)
	return _c
}

// GetBearerToken provides a mock function with given fields: headers
func (_m *AuthModel) GetBearerToken(headers http.Header) (string, error) {
	ret := _m.Called(headers)

	if len(ret) == 0 {
		panic("no return value specified for GetBearerToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(http.Header) (string, error)); ok {
		return rf(headers)
	}
	if rf, ok := ret.Get(0).(func(http.Header) string); ok {
		r0 = rf(headers)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(http.Header) error); ok {
		r1 = rf(headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthModel_GetBearerToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBearerToken'
type AuthModel_GetBearerToken_Call struct {
	*mock.Call
}

// GetBearerToken is a helper method to define mock.On call
//   - headers http.Header
func (_e *AuthModel_Expecter) GetBearerToken(headers interface{}) *AuthModel_GetBearerToken_Call {
	return &AuthModel_GetBearerToken_Call{Call: _e.mock.On("GetBearerToken", headers)}
}

func (_c *AuthModel_GetBearerToken_Call) Run(run func(headers http.Header)) *AuthModel_GetBearerToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Header))
	})
	return _c
}

func (_c *AuthModel_GetBearerToken_Call) Return(_a0 string, _a1 error) *AuthModel_GetBearerToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthModel_GetBearerToken_Call) RunAndReturn(run func(http.Header) (string, error)) *AuthModel_GetBearerToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenRevoked provides a mock function with given fields: ctx, token
func (_m *AuthModel) IsTokenRevoked(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenRevoked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthModel_IsTokenRevoked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenRevoked'
type AuthModel_IsTokenRevoked_Call struct {
	*mock.Call
}

// IsTokenRevoked is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *AuthModel_Expecter) IsTokenRevoked(ctx interface{}, token interface{}) *AuthModel_IsTokenRevoked_Call {
	return &AuthModel_IsTokenRevoked_Call{Call: _e.mock.On("IsTokenRevoked", ctx, token)}
}

func (_c *AuthModel_IsTokenRevoked_Call) Run(run func(ctx context.Context, token string)) *AuthModel_IsTokenRevoked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthModel_IsTokenRevoked_Call) Return(_a0 bool, _a1 error) *AuthModel_IsTokenRevoked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthModel_IsTokenRevoked_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *AuthModel_IsTokenRevoked_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: token, secret
func (_m *AuthModel) RefreshToken(token string, secret string) (string, error) {
	ret := _m.Called(token, secret)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(token, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(token, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthModel_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AuthModel_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - token string
//   - secret string
func (_e *AuthModel_Expecter) RefreshToken(token interface{}, secret interface{}) *AuthModel_RefreshToken_Call {
	return &AuthModel_RefreshToken_Call{Call: _e.mock.On("RefreshToken", token, secret)}
}

func (_c *AuthModel_RefreshToken_Call) Run(run func(token string, secret string)) *AuthModel_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthModel_RefreshToken_Call) Return(_a0 string, _a1 error) *AuthModel_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthModel_RefreshToken_Call) RunAndReturn(run func(string, string) (string, error)) *AuthModel_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthModel creates a new instance of AuthModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthModel {
	mock := &AuthModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
